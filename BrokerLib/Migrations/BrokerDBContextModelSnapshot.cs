// <auto-generated />
using System;
using BrokerLib.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BrokerLib.Migrations
{
    [DbContext(typeof(BrokerDBContext))]
    partial class BrokerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrokerLib.Models.AccessPoint", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BearerToken")
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("BrokerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.ToTable("AccessPoints");
                });

            modelBuilder.Entity("BrokerLib.Models.ActiveMarket", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<long>("BrokerId")
                        .HasColumnType("bigint");

                    b.Property<long>("BrokerType")
                        .HasColumnType("bigint");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("ActiveMarkets");
                });

            modelBuilder.Entity("BrokerLib.Models.Candle", b =>
                {
                    b.Property<long>("TimeFrame")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<double>("Close")
                        .HasColumnType("float");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<double>("Open")
                        .HasColumnType("float");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("VolumeQuote")
                        .HasColumnType("float");

                    b.HasKey("TimeFrame", "Symbol", "Timestamp");

                    b.HasAlternateKey("Symbol", "TimeFrame", "Timestamp");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("BrokerLib.Models.Equity", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("EquityValue")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RealAvailableAmountSymbol1")
                        .HasColumnType("money");

                    b.Property<decimal>("RealAvailableAmountSymbol2")
                        .HasColumnType("money");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("money");

                    b.Property<decimal>("VirtualNAV")
                        .HasColumnType("money");

                    b.HasKey("id");

                    b.ToTable("Equitys");
                });

            modelBuilder.Entity("BrokerLib.Models.Point", b =>
                {
                    b.Property<long>("TimeFrame")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("TimeFrame", "Symbol", "Timestamp", "Line");

                    b.HasAlternateKey("Line", "Symbol", "TimeFrame", "Timestamp");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("BrokerLib.Models.Trade", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessPointId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BrokerTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuyTradeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Leverage")
                        .HasColumnType("bigint");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("BrokerLib.Models.Transaction", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountSymbol2")
                        .HasColumnType("float");

                    b.Property<string>("BotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("LastProfitablePrice")
                        .HasColumnType("float");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("States")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StopLoss")
                        .HasColumnType("float");

                    b.Property<double>("TakeProfit")
                        .HasColumnType("float");

                    b.Property<string>("TelegramTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
