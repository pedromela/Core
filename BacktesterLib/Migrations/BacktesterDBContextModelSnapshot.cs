// <auto-generated />
using System;
using BacktesterLib.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BacktesterLib.Migrations
{
    [DbContext(typeof(BacktesterDBContext))]
    partial class BacktesterDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BacktesterLib.Models.BacktesterEquity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("EquityValue")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("RealAvailableAmountSymbol1")
                        .HasColumnType("money");

                    b.Property<decimal>("RealAvailableAmountSymbol2")
                        .HasColumnType("money");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("money");

                    b.Property<decimal>("VirtualNAV")
                        .HasColumnType("money");

                    b.HasKey("id");

                    b.ToTable("BacktesterEquitys");
                });

            modelBuilder.Entity("BacktesterLib.Models.BacktesterScore", b =>
                {
                    b.Property<string>("BotParametersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActiveTransactions")
                        .HasColumnType("int");

                    b.Property<double>("AmountGained")
                        .HasColumnType("float");

                    b.Property<double>("AmountGainedDaily")
                        .HasColumnType("float");

                    b.Property<double>("CurrentProfit")
                        .HasColumnType("float");

                    b.Property<double>("MaxDrawBack")
                        .HasColumnType("float");

                    b.Property<long>("Positions")
                        .HasColumnType("bigint");

                    b.Property<long>("Successes")
                        .HasColumnType("bigint");

                    b.HasKey("BotParametersId");

                    b.ToTable("BacktesterScores");
                });

            modelBuilder.Entity("BacktesterLib.Models.BacktesterTransaction", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountSymbol2")
                        .HasColumnType("float");

                    b.Property<string>("BotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("LastProfitablePrice")
                        .HasColumnType("float");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("States")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StopLoss")
                        .HasColumnType("float");

                    b.Property<double>("TakeProfit")
                        .HasColumnType("float");

                    b.Property<string>("TelegramTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("BacktesterTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
